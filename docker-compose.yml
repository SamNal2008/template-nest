version: '3.8'

volumes: 
    pg-data:
      external: true

networks:
  internal-network:
    driver: bridge

services:
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pg-data:/var/lib/postgresql/data:rw
    ports:
     - ${POSTGRES_PORT}:5432
    networks:
      - internal-network

  app-dev:
    container_name: ${APP_NAME}
    image: ${APP_NAME}:latest
    build:
      context: .
      target: build
      dockerfile: ./Dockerfile
    command: npm run start:debug
    ports:
      - ${PORT}:${PORT}
      - 9229:9229
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    restart: unless-stopped
    depends_on:
      - "postgres"
    networks:
      - internal-network

  
  # prod:
  #   container_name: nestjs-app-prod
  #   image: nestjs-api-prod:latest
  #   build:
  #       context: .
  #       target: production
  #       dockerfile: ./Dockerfile
  #   command: npm run start:prod
  #   ports:
  #       - ${PORT}:${PORT}
  #       - 9229:9229
  #   volumes:
  #       - .:/usr/src/app
  #       - /usr/src/app/node_modules
  #   restart: unless-stopped

  # sonarqube:
  #   container_name: sonarqube
  #   image: sonarqube:latest
  #   ports:
  #     - "9000:9000"
  #     - "9092:9092"

